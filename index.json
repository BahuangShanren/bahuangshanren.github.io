[{"categories":["软件"],"content":"Gnirehtet可以通过 `adb` 将电脑的网络共享给Android设备","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"注意 项目仓库地址：https://github.com/Genymobile/gnirehtet 别忘了打开 开发者选项 中的 USB调试 和 USB安装 在任意终端中使用 gnirehtet 的以下命令 推荐将 gnirehtet 添加到系统环境变量中方便调用 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:0:0","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"使用场景 使用场景 电脑插着网线可以联网，但没有无线网卡，也没有随身WiFi，没法开热点。 打游戏时想体验更快的网络速度。 使用场景确实不多，但有意思的是，锐捷校园网客户端v6.80 并不能检测到这种操作，更别提禁止了，所以😏 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:1:0","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"Syntax gnirehtet (install|uninstall|reinstall|run|autorun|start|autostart|stop|restart|tunnel|relay) ... ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:0","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet install gnirehtet install [serial] Install the client on the Android device and exit. If several devices are connected via adb, then serial must be specified. 此命令用于手动向安卓设备上安装 gnirehtet，设备的 serial 使用 adb devices 查看。 中括号 [] 内的参数是可选的，所以只有一台安卓设备与电脑连接时，可以不用输入 serial 。 如果安卓设备上没有安装 gnirehtet，后续运行 gnirehtet run 命令时，也会自动向设备安装 gnirehtet。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:1","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet uninstall gnirehtet uninstall [serial] Uninstall the client from the Android device and exit. If several devices are connected via adb, then serial must be specified. 此命令用于卸载指定安卓设备上的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:2","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet reinstall gnirehtet reinstall [serial] Uninstall then install. 此命令用于重新安装指定安卓设备上的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:3","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet run gnirehtet run [serial] [-d DNS[,DNS2,...]] [-p PORT] [-r ROUTE[,ROUTE2,...]] Enable reverse tethering for exactly one device: - install the client if necessary; - start the client; - start the relay server; - on Ctrl+C, stop both the relay server and the client. 运行 gnirehtet run 命令，启动电脑和安卓设备上的 gnirehtet 。 默认DNS为 8.8.8.8 ，使用 -d 参数指定DNS，比如 -d 223.5.5.5,223.6.6.6 。 默认端口为 31416 ，使用参数 -p 指定端口。 默认路由为 0.0.0.0/0 ，使用参数 -r 指定路由。 按 Ctrl+C 结束电脑和安卓设备上 gnirehtet 的运行。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:4","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet autorun gnirehtet autorun [-d DNS[,DNS2,...]] [-p PORT] [-r ROUTE[,ROUTE2,...]] Enable reverse tethering for all devices: - monitor devices and start clients (autostart); - start the relay server. gnirehtet autorun 和 gnirehtet run 的区别是： gnirehtet autorun 自动启动电脑和安卓设备上的 gnirehtet 而 gnirehtet run 只能启动一台指定设备的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:5","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet start gnirehtet start [serial] [-d DNS[,DNS2,...]] [-p PORT] [-r ROUTE[,ROUTE2,...]] Start a client on the Android device and exit. If several devices are connected via adb, then serial must be specified. If -d is given, then make the Android device use the specified DNS server(s). Otherwise, use 8.8.8.8 (Google public DNS). If -r is given, then only reverse tether the specified routes.Otherwise, use 0.0.0.0/0 (redirect the whole traffic). If -p is given, then make the relay server listen on the specified port. Otherwise, use port 31416. If the client is already started, then do nothing, and ignore the other parameters. 10.0.2.2 is mapped to the host 'localhost'. 此命令用于启动指定安卓设备上的 gnirehtet 。 只有安卓设备上的 gnirehtet 停止时，才需要手动启动 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:6","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet autostart gnirehtet autostart [-d DNS[,DNS2,...]] [-p PORT] [-r ROUTE[,ROUTE2,...]] Listen for device connexions and start a client on every detected device. Accept the same parameters as the start command (excluding the serial, which will be taken from the detected device). 此命令用于自动启动所有与电脑连接的安卓设备上的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:7","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet stop gnirehtet stop [serial] Stop the client on the Android device and exit. If several devices are connected via adb, then serial must be specified. 此命令用于停止指定安卓设备上的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:8","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet restart gnirehtet restart [serial] [-d DNS[,DNS2,...]] [-p PORT] [-r ROUTE[,ROUTE2,...]] Stop then start. 此命令用于重新启动指定安卓设备上的 gnirehtet 。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:9","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet tunnel gnirehtet tunnel [serial] [-p PORT] Set up the 'adb reverse' tunnel. If a device is unplugged then plugged back while gnirehtet is active, resetting the tunnel is sufficient to get the connection back. 此命令用于连接中断后的自动重连。 ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:10","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["软件"],"content":"gnirehtet relay gnirehtet relay [-p PORT] Start the relay server in the current terminal. 在当前终端中启动中继服务器。 提示 一般只用这条命令：gnirehtet run -d 223.5.5.5,223.6.6.6 ，偶尔用用 gnirehtet tunnel ","date":"2021-03-14","objectID":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:11","tags":["命令行","网络"],"title":"Gnirehtet使用笔记","uri":"/gnirehtet%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"},{"categories":["终端"],"content":"清除cmd和powershell的输入记录","date":"2021-03-14","objectID":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/","tags":["命令行"],"title":"清除cmd和powershell的输入记录","uri":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/"},{"categories":["终端"],"content":"cmd 微软关于 doskey 命令的 官方文档 中写的很详细，比如可以使用 doskey /history 查看当前cmd会话窗口的命令历史记录，至于怎么清除历史记录？ 话说关闭当前cmd会话窗口，再打开一个会话窗口，就调不出来历史记录了。 仅供参考 不知道是不是因为我Windows 10版本比较高，这些方法都没效果 改注册表 在注册表中的 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU 下清除 默认 之外的所有字符串值。 然而我电脑这里只有一个 默认 的字符串值。 使用 doskey / listsize=0 让当前cmd会话窗口的命令历史记录条数为0，间接实现 doskey /history 查不出历史记录的效果。 ","date":"2021-03-14","objectID":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/:1:0","tags":["命令行"],"title":"清除cmd和powershell的输入记录","uri":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/"},{"categories":["终端"],"content":"PowerShell 微软这个清除PowerShell的输入历史记录的 官方文档 ，根本没用啊🙄 在Stack Overflow上也有 这个问题 ，参考 高赞答案 得知 原因 PowerShell有自己的历史机制（Get-History，Clear-History），是独立于主机的，所以还需要清除主机上存储的命令历史记录。 所以 单独使用不行 只使用 Clear-History 命令 虽然使用 Get-History 命令会发现只有一条历史记录，就是刚刚输入的 Clear-History 。 但是 ，按几下 ↑ 键，就会发现以前的输入记录都还在。 只按 Alt + F7 虽然按几下 ↑ 键，发现以前的输入记录都没有了。 但是 ，这时候使用 Get-History 命令会发现PowerShell把以前的历史记录清楚地列了出来。 合起来使用也不行 然而，就算合起来使用这两种方法，比如先按 Alt + F7 ，再使用 Clear-History 命令，似乎这时候输入历史记录中就只有 Clear-History 这一条刚刚输入的命令了。 但是 ，输入的命令历史记录跨会话保存在文件中，即所谓的 PowerShell自己的历史机制是独立于主机的 。主机上存储的命令历史记录文件没有得到清除。 ","date":"2021-03-14","objectID":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/:2:0","tags":["命令行"],"title":"清除cmd和powershell的输入记录","uri":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/"},{"categories":["终端"],"content":"解决方法 靠谱的方法 使用 (Get-PSReadlineOption).HistorySavePath 会得到PowerShell的输入历史记录存放路径：C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt 打开一看，历史记录全在这，删除后，关闭当前PowerShell，再重新打开，就调不出历史纪录了。 ","date":"2021-03-14","objectID":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/:2:1","tags":["命令行"],"title":"清除cmd和powershell的输入记录","uri":"/%E6%B8%85%E9%99%A4cmd%E5%92%8Cpowershell%E7%9A%84%E8%BE%93%E5%85%A5%E8%AE%B0%E5%BD%95/"},{"categories":["Git"],"content":"使用GitHub Actions把GitHub相应仓库同步推送到Gitee，或者把Gitee相应仓库同步推送到GitHub","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["Git"],"content":"GitHub同步到Gitee ","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/:1:0","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["Git"],"content":"设置 dst_key 在 GitHub 上打开自己的一个仓库（可以是要同步的源仓库，也可以是别的仓库，总之这个仓库将用来执行GitHub Actions），在它的 setting → Secrets 中，新建一个 GITEE_PRIVATE_KEY 。 在电脑上生成SSH密钥对。 复制私钥 id_rsa 的值，粘贴为第1步 GITEE_PRIVATE_KEY 的 Value 。 复制公钥 id_rsa.pub 的值。打开 Gitee ，在个人 设置 → 安全设置 → SSH公钥 中新添加公钥，标题无所谓，将公钥 id_rsa.pub 的值粘贴上。 ","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/:1:1","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["Git"],"content":"设置 dst_token 在刚才的 GitHub 仓库的 setting → Secrets 中，再新建一个 GITEE_TOKEN 。 打开 Gitee ，在个人 设置 → 安全设置 → 私人令牌 中新建一个私人令牌，名字无所谓，全选权限，确定，然后复制它的值，粘贴为第1步中 GITEE_TOKEN 的 Value 。 ","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/:1:2","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["Git"],"content":"配置 Github Actions 在刚才的GitHub仓库中，新建 .github/workflows/SyncToGitee.yml 文件，写入以下代码，然后提交： name:Sync Github Repos To Giteeon:push:branches:- masterjobs:build:runs-on:ubuntu-20.04steps:- name:Sync Github Repos To Gitee#名字随便起uses:Yikun/hub-mirror-action@v1.0#使用Yikun开发的hub-mirror-actionwith:src:github/user_name#源端账户名dst:gitee/user_name#目的端账户名dst_key:${{ secrets.GITEE_PRIVATE_KEY }}#SSH密钥对中的私钥，即 id_rsadst_token:${{ secrets.GITEE_TOKEN }}#Gitee账户的私人令牌account_type:user#账户类型clone_style:\"ssh\"#使用ssh方式进行clone，也可以使用httpsdebug:true#启用后会显示所有执行命令force_update:true#启用后，强制同步，即强制覆盖目的端仓库static_list:\"picture\"#静态同步列表，在此填写需要同步的仓库名称，可填写多个timeout:'600s'#git超时设置，超时后会自动重试git操作 注意 这个配置文件仅适用于 GitHub 中的源仓库在每次提交更改后，自动将源仓库同步到 Gitee 的目标仓库。 也可以使用 cron 命令使其定时运行： on:schedule:- cron:'0 1 * * *'#每天北京时间 9点运行branches:- master 源仓库与目标仓库名称应该设置为相同，至于名称不同的解决方法，作者Yikun暂时还没有实现，参考这个 issue ","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/:1:3","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["Git"],"content":"Gitee同步到GitHub 步骤基本一样，只是需要将 .github/workflows/SyncToGitee.yml 中的源端账户名 src 和目的端账户名 dst 调换一下： src:gitee/user_name#源端账户名dst:github/user_name#目的端账户名 注意 因为同步时会将Gitee源仓库覆盖GitHub目的仓库，所以，同步之后，GitHub目的仓库中的 .github/workflows/SyncToGitee.yml 文件就没有了，无法执行下次同步，需要把 .github/workflows/SyncToGitee.yml 在Gitee源仓库中也存放一份。 更多设置项请参考 Yikun/hub-mirror-action yi-Xu-0100/hub-mirror ","date":"2021-03-14","objectID":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/:2:0","tags":["Git"],"title":"GitHub与Gitee双向自动同步","uri":"/github%E4%B8%8Egitee%E5%8F%8C%E5%90%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/"},{"categories":["网站"],"content":"Hugo版WebStack导航站目录文件简介","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["网站"],"content":"八荒山人导航 我的导航站：https://nav.bahuangshanren.tech/ 导航站源码地址：https://github.com/BahuangShanren/navigation ","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/:0:0","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["网站"],"content":"目录树 navigation ├─ .github │ └─ workflows │ └─ gh-pages.yml ├─ LICENSE ├─ README.md ├─ archetypes │ └─ default.md ├─ config.toml ├─ content │ └─ about.md └─ themes └─ webstack-hugo ├─ data │ └─ webstack.yml ├─ layouts │ ├─ 404.html │ ├─ _default │ │ └─ single.html │ └─ index.html ├─ static │ └─ assets │ ├─ css │ │ ├─ bootstrap.css │ │ ├─ fontawesome_v4.7.0 │ │ │ ├─ css │ │ │ │ └─ font-awesome.min.css │ │ │ └─ fonts │ │ │ ├─ FontAwesome.otf │ │ │ ├─ fontawesome-webfont.eot │ │ │ ├─ fontawesome-webfont.svg │ │ │ ├─ fontawesome-webfont.ttf │ │ │ ├─ fontawesome-webfont.woff │ │ │ └─ fontawesome-webfont.woff2 │ │ ├─ googleapis.css │ │ ├─ nav.css │ │ ├─ xenon-components.css │ │ ├─ xenon-core.css │ │ ├─ xenon-forms.css │ │ ├─ xenon-skins.css │ │ └─ xenon.css │ ├─ images │ │ ├─ favicon.svg │ │ ├─ logo@2x.svg │ │ ├─ logo_dark@2x.svg │ │ └─ logos │ │ ├─ Default.svg │ │ └─ Github.svg │ └─ js │ ├─ TweenMax.min.js │ ├─ bootstrap.min.js │ ├─ joinable.js │ ├─ jquery-1.11.1.min.js │ ├─ lozad.js │ ├─ resizeable.js │ ├─ xenon-api.js │ ├─ xenon-custom.js │ └─ xenon-toggles.js └─ theme.toml ","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/:1:0","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["网站"],"content":"对于目录及文件的简介 ","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/:2:0","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["网站"],"content":"/.github/workflows/gh-pages.yml Github Actions自动构建和部署配置文件。 name:Deploy Navigation#名字随便起on:push:branches:- master#源码所在分支jobs:deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v2- name:Setup Hugo#安装hugouses:peaceiris/actions-hugo@v2.4.13#使用peaceiris开发的actions-hugowith:hugo-version:'latest'#可以指定版本号，也可以使用latest表示最新版extended:true#支持hugo的扩展版- name:Build#使用hugo构建网页run:hugo --gc --minify- name:Deploy#部署博客uses:peaceiris/actions-gh-pages@v3.7.3with:personal_token:${{ secrets.navigation }}# 个人访问令牌publish_branch:gh-pages# 发布网站的分支publish_dir:./publiccname:# 你的域名commit_message:${{ github.event.head_commit.message }} 不重要的几个文件 archetypes/default.md 没什么用处。 config.toml 是hugo网站中常用的基础配置文件，在这个主题中需要配置的项不多。 content/about.md 用于生成 关于本站 页面。 ","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/:2:1","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["网站"],"content":"/themes/webstack-hugo /data/webstack.yml /themes/webstack-hugo/data/webstack.yml ,导航网站页面中的网址都在这里配置。 一级导航栏示例 - taxonomy:常用# 一级导航栏名称icon:fa-star# fontawesome图标links:- title:Github# 网站名称logo:assets/images/logos/Github.svg # logo地址，即 themes/webstack-hugo/static/assets/images/logos/XXX.svgurl:https://github.com/# 网址description:# 网站名称下面对于网站的描述- title:Giteelogo:assets/images/logos/Gitee.svgurl:https://gitee.com/description: 二级导航栏示例 - taxonomy:邮箱# 一级导航栏名称icon:fa-envelopelist:- term:普通邮箱# 二级导航栏名称icon:fa-envelopelinks:- title:Gmaillogo:assets/images/logos/Gmail.svgurl:https://mail.google.com/description:- term:临时邮箱icon:fa-envelope-openlinks:- title:临时邮箱logo:assets/images/logos/Linshiyouxiang.svgurl:https://linshiyouxiang.net/description: /layouts themes/webstack-hugo/layouts/_default/single.html 网站默认模板，比如 关于本站 的页面。 themes/webstack-hugo/layouts/index.html 网站首页模板。 /static /assets /css themes/webstack-hugo/static/assets/css/fontawesome_v4.7.0 原作者在 themes/webstack-hugo/static/assets/css/fonts 这里放了好几种图标，感觉用不太到，就只留下了 fontawesome 。又因其版本不高，于是升级，但以我现在的水平只能把 fontawesome 升到 v4.7.0 ，本来想升到 v5.0 ，但是 v5.0 的结构不同于 v4.7.0 ，要是换的话，需要处理负责网站框架的CSS和JS。 换用图标注意事项 在 single.html 和 index.html 这两个网页模板中， \u003chead\u003e 中引入 fontawesome 的CSS路径。 用新的图标名称替换掉旧的。 其他CSS是网站框架方面的CSS。 /images themes/webstack-hugo/static/assets/images/logos 网站首页各个网址的logo都存放在这里。 themes/webstack-hugo/static/assets/images/favicon.svg 是网站首页左侧导航菜单在折叠状态的左上角图标。 themes/webstack-hugo/static/assets/images/logo_dark@2x.svg 是 关于本站 页面中网站左上角的图标。 themes/webstack-hugo/static/assets/images/logo@2x.svg 是网站首页左侧导航菜单在展开状态的左上角图标。 /js 网站框架方面的JS。 /theme.toml 主题配置文件，不用修改。 ","date":"2021-03-13","objectID":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/:2:2","tags":["Hugo"],"title":"Hugo版WebStack目录文件简介","uri":"/hugo%E7%89%88webstack%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"},{"categories":["博客"],"content":"记录LoveIt配置中踩过的坑及处理办法","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"本地调试时加载评论系统 使用 hugo server ,会得到终端的提示： Current environment is \"development\". The \"comment system\", \"CDN\" and \"fingerprint\" will be disabled. 当前运行环境是 \"development\". \"评论系统\", \"CDN\" 和 \"fingerprint\" 不会启用. 解决方法 使用 hugo server -e production 命令即可运行生产环境进行调试，就能加载评论系统了。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:1:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"Console报错找不到 site.webmanifest 一定要处理 如果不处理的话，会影响网站的打开速度。 参考LoveIt主题作者的 方法 ,到 Favicon Generator 处理自己的网站图标，最后会下载一个压缩包，包括生成的图标和 browserconfig.xml 、 site.webmanifest 等文件，将这些文件放到 blog\\themes\\LoveIt\\static 中即可。 顺嘴一提 blog\\themes\\LoveIt\\static 这个目录里的文件，最后会出现在网站根目录中。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:2:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"LoveIt扩展Shortcodes 更多扩展Shortcodes的应用方法请查看LoveIt主题作者写的 使用说明 。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:3:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"admonition admonition比较常用，有12个样式，但是主题作者并没说明每种样式对应的 type 是什么。我从源码中找到了它们的对应关系，在此记录一下。 用法 {{\u003c admonition type=tip title=\"This is a tip\" open=true \u003e}} 一个\"技巧\"横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" true \u003e}} 一个\"技巧\"横幅 {{\u003c /admonition \u003e}} 示例 注意 type=note 摘要 type=abstract 信息 type=info 技巧 type=tip 成功 type=success 问题 type=question 警告 type=warning 失败 type=failure 危险 type=danger Bug type=Bug 示例 type=example 引用 type=quote ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:3:1","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"keywords不生效 参考自 雨临Lewis 的这篇文章。 前提配置 在站点配置文件 config.toml 中填好网站关键词： # 网站关键词 keywords = \"keyword1,keyword2\" 虽然已经设置了 keywords ，但是F12查看网站源码后发现缺少 keywords 这个 meta 标签，而且在 站长工具 里查询站点时发现页面TDK信息里的关键词 KeyWords 为空。 debug 检查模板文件后发现是LoveIt主题没有引入该标签，需要修改模板。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:4:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"解决方法 将 blog\\themes\\LoveIt\\layouts\\partials\\head\\meta.html 复制到 blog\\layouts\\partials\\head\\meta.html ，打开该文件并在 \u003cmeta name=\"Description\" content=\"{{ $params.description | default .Site.Params.description }}\"\u003e 的上方添加如下代码： \u003cmeta name=\"keywords\" content=\"{{ $params.keywords | default .Site.Params.keywords }}\"\u003e ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:4:1","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"参考链接 更多踩坑记录请参考雨临Lewis的 这篇文章 。 更多优化美化指南请参考雨临Lewis的 这篇文章 。 注意 上面雨临Lewis的两篇文章中有许多地方对于 LoveIt_v0.2.10 是不必要的。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:4:2","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"换用twikoo评论系统 最开始用的评论系统是 valine ，后来换用了带有后台的 waline ，再之后发现 twikoo 后台配置很方便，界面也很好看，于是决定换一波。 但有个问题，twikoo只适配了Hexo的部分主题，而没有适配Hugo主题。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:5:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"解决方法 可以修改评论系统模板文件 blog\\themes\\LoveIt\\layouts\\partials\\comment.html 来手动添加对twikoo的支持，在 \u003cdiv id=\"comments\"\u003e\u003c/div\u003e 中添加以下代码： {{- /* twikoo Comment System */ -}} {{- $twikoo := $comment.twikoo}} {{- if $twikoo.enable -}} \u003cdiv id=\"tcomment\"\u003e\u003c/div\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/twikoo@1.3.1/dist/twikoo.all.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e twikoo.init({ envId: '', // 此处填写您的环境id el: '#tcomment', // region: 'ap-guangzhou', // 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数 // path: 'window.location.pathname', // 用于区分不同文章的自定义 js 路径，如果您的文章路径不是 location.pathname，需传此参数 }) \u003c/script\u003e {{- end }} 然后在博客配置文件 blog\\config.toml 中的 # 评论系统设置 [params.page.comment] enable = true 下面添加 # twikoo评论系统 [params.page.comment.twikoo] enable = true 更多twikoo配置 云部署及版本更新等信息，请到twikoo 官网 查看。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:5:1","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"部署方式 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:6:0","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"几种选择 GitHub Actions CircleCI 、Netlify 、Travis CI 、Vercel 等第三方服务 最后还是选了GitHub Actions，因为不用到另外的网站上再配置一通，使用 actions-hugo 和 actions-gh-pages 这两个Action，每次写完博客，push一下，GitHub Actions就会自动构建和部署博客。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:6:1","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["博客"],"content":"GitHub Actions自动部署Hugo 参考 actions-hugo 和 actions-gh-pages 创建一个私有仓库用来存放博客源码。 创建一个公有仓库用来发布博客。 创建一个个人 token ，名字可以叫做 blog 。 此token的访问范围选择 repo 和 workflow 。 生成token，记住它的值。 到博客源码仓库的 Settings → Secrets 中新建一个 Actions secrets ,名字也叫做 blog ,Value填入上一步中的个人token的值。 在博客源码仓库的根目录下创建 .github/workflows/gh-pages.yml 文件，写入以下代码，然后提交： name:Deploy Blog#名字随便起on:push:branches:- master#源码所在分支jobs:deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v2- name:Setup Hugo#安装hugouses:peaceiris/actions-hugo@v2.4.13#使用peaceiris开发的actions-hugowith:hugo-version:'latest'#可以指定版本号，也可以使用latest表示最新版extended:true#支持hugo的扩展版- name:Build#使用hugo构建博客run:hugo --gc --minify- name:Deploy#部署博客uses:peaceiris/actions-gh-pages@v3.7.3#使用peaceiris开发的actions-gh-pageswith:personal_token:${{ secrets.blog }} external_repository:#用来发布博客的公有仓库publish_branch:masterpublish_dir:./publiccname:#填写你的域名commit_message:${{ github.event.head_commit.message }} 双仓库模式 本博客即采用上面的 gh-pages.yml ，使用私有仓库存放博客源码，将Hugo构建好的 public 目录推送到公有仓库来发布。 双分支模式 也可以在一个公有仓库中创建两个分支，一个放源码，一个用来发布，但是那样会暴露源码中一些服务的ID和Key。 ","date":"2021-03-12","objectID":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/:6:2","tags":["Hugo"],"title":"Hugo+Loveit优化记","uri":"/hugo-loveit%E4%BC%98%E5%8C%96%E8%AE%B0/"},{"categories":["软件"],"content":"Speedtest命令行版本的使用帮助","date":"2020-08-31","objectID":"/speedtest_cli/","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"下载地址 来自 speedtest.net 的 Speedtest_Cli 注意 不是 speedtest.cn 的 命令行测速工具 ","date":"2020-08-31","objectID":"/speedtest_cli/:1:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"简介 speedtest [-aAbBfhiIpPsv] [--ca-certificate=path] [--format=[=format-type]] [--help] [--interface=interface] [--ip=ip_address] [--output-header] [--precision=num_decimal_places] [--progress=yes|no] [--selection-details] [--server-id=id] [--servers] [--unit=[=unit-of-measure]] [--version] ","date":"2020-08-31","objectID":"/speedtest_cli/:2:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"选项 -h, –help 打印使用信息 -v 记录详细程度，为更高的详细程度指定多次（例如-vvv） -V, –version 打印版本号 -L, –servers 列出最近的服务器 –selection-details 显示服务器选择详细信息 -s id, –server-id=id 使用服务器id从服务器列表中指定服务器 -o hostname, –host=hostname 从服务器列表中使用其主机名指定服务器 -f format_type,–format=format_type 输出格式（默认值=human-readable） 注意 Machine readable（csv、tsv、json、json、json pretty）使用字节作为最大精度的测量单位。 format_type 值如下： format type human-readable 人类可读输出 csv 逗号分隔值 tsv 制表符分隔值 json javascript对象表示法（compact） jsonl javascript对象表示法（lines） json-pretty javascript对象表示法（pretty） --output-header 显示CSV和TSV格式的输出标题 -u* unit_of_measure, --unit* unit_of_measure 用于显示速度的输出装置（注：这仅适用于对于human-readable输出格式，默认单位为Mbps） 单位 解释 bps bits 每秒 (十进制前缀) kbps kilobits 每秒 (十进制前缀) Mbps megabits 每秒 (十进制前缀) Gbps gigabits 每秒 (十进制前缀) kibps kilobits 每秒 (二进制前缀) Mibps megabits 每秒 (二进制前缀) Gibps gigabits 每秒 (二进制前缀) B/s bytes 每秒 kB/s kilobytes 每秒 MB/s megabytes 每秒 GiB/s gigabytes 每秒 auto-binary-bytes 自动二进制字节 auto-decimal-bytes 自动十进制字节 auto-binary-bits 自动二进制位 auto-decimal-bits 自动十进制位 -a [-u auto-decimal-bits] 的快捷方式 -A [-u auto-decimal-bytes] 的快捷方式 -b [-u auto-binary-bits] 的快捷方式 -B [-u auto-binary-bytes] 的快捷方式 -P decimal_places --precision=decimal_places 要使用的小数位数 (默认 = 2, 有效 = 0~8) -p yes | no --progress=yes | no 启用或禁用进度条 (默认 = yes，互动时) -I interface --interface=interface 连接到服务器时尝试绑定到指定的接口 -i ip_address --ip=ip_address 连接到服务器时尝试绑定到指定的IP地址 --ca-certificate=path CA证书捆绑包的路径，请参阅下面的注释。 ","date":"2020-08-31","objectID":"/speedtest_cli/:3:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"输出 成功执行后，应用程序将退出，退出代码为0。结果将包括延迟、抖动、下载、上载、数据包丢失（如果可用）和结果URL。 延迟和抖动将以毫秒表示。下载和上传单元将取决于输出格式以及是否指定了单位。human-readable 格式默认为Mbps和任何机器可读格式（csv、tsv、json、json、json pretty）使用字节作为最大精度的度量单位。数据包丢失用百分比表示，当数据包丢失在执行的网络环境中不可用时，不可用。 结果URL可用于共享您的结果，将 .png 附加到结果URL将创建一个可共享的结果图像。 human-readable 结果示例 $ speedtest Speedtest by Ookla Server: Speedtest.net - New York, NY (id = 10390) ISP: Comcast Cable Latency: 57.81 ms (3.65 ms jitter) Download: 76.82 Mbps (data used: 80.9 MB) Upload: 37.58 Mbps (data used: 65.3 MB) Packet Loss: 0.0% Result URL: https://www.speedtest.net/result/c/8ae1200c-e639-45e5-8b55-41421a079250 ","date":"2020-08-31","objectID":"/speedtest_cli/:4:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"网络超时值 默认情况下，网络请求将超时设置为10秒。唯一的例外是是延迟测试，它将超时设置为15秒。 ","date":"2020-08-31","objectID":"/speedtest_cli/:5:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"致命错误 一旦出现致命错误，应用程序将以非零退出代码退出。 初始化致命错误示例： Configuration - Couldn't connect to server (Network is unreachable) Configuration - Could not retrieve or read configuration (ConfigurationError) 阶段执行致命错误示例： [error] Error: [1] Latency test failed for HTTP [error] Error: [36] Cannot open socket: Operation now in progress [error] Failed to resolve host name. Cancelling test suite [error] Host resolve failed: Exec format error [error] Cannot open socket: No route to host [error] Server Selection - Failed to find a working test server. (No Servers) ","date":"2020-08-31","objectID":"/speedtest_cli/:6:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["软件"],"content":"SSL证书位置 默认情况下，会检查linux计算机上CA证书捆绑包的以下路径： /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt /usr/share/ssl/certs/ca-bundle.crt /usr/local/share/certs/ca-root-nss.crt /etc/ssl/cert.pem 如果测试中的设备没有以上提到的文件之一，那么curl项目提供的规范和最新的CA证书包可以手动完成下载到特定位置。可根据以下示例将此特定位置作为参数提供： wget https://curl.haxx.se/ca/cacert.pem ./ookla --ca-certificate=./cacert.pem ","date":"2020-08-31","objectID":"/speedtest_cli/:7:0","tags":["命令行","网络"],"title":"Speedtest_Cli","uri":"/speedtest_cli/"},{"categories":["系统"],"content":"关于Debian的常见问题解决、驱动安装、优化美化小指南","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"前言 注意 本文档默认以普通用户身份运行系统 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:1:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"换源 清华大学开源软件镜像站使用帮助-Debian 中国科学技术大学开源软件镜像站使用帮助-Debian 随便选一个，记得把 source.list 里的CD源注释掉，一般安装完系统就用不上了，要是不注释掉，每次 apt update 都会被提醒这个源不能正常使用。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:2:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"驱动安装 首先可以先检测已安装的驱动：lspci -knn ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:3:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"RTL8821CE无线网卡 到tomaspinho的 GitHub仓库 下载驱动 sudo apt install bc module-assistant build-essential dkms sudo m-a prepare 在包含源代码的目录中打开一个终端，然后执行以下命令： sudo ./dkms-install.sh 第3步一般都会被告知权限不够，不能运行 dkms-install.sh 。就算 su root 后，权限还是不够，因为这里的权限指的是文件的操作权限。可以先更改该文件的操作权限：chmod 777 dkms-install.sh ，然后再使用 sudo ./dkms-install.sh 运行。这算是运行脚本时常见问题。 其他方式 对于这个网卡驱动，这一步也可以使用以下命令编译： sudo make 、sudo make install 重启Debian ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:3:1","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"显卡 各类显卡驱动WiKi NVIDIA显卡 注意 WiKi最好用英文看，因为官方的中文版本比较落后。比如下面第一个，简体中文版只有Debian 6和Debian 7，而英文版有Debian 9和Debian 10。 系统自带的是开源驱动nouveau。但我用NVIDIA官方的驱动。 首先安装NVIDIA官方驱动，可以在 WiKi 的列举里下载（注意查看是否为受支持的设备），并按照 WiKi 安装。 也可以到NVIDIA 官网 下载 run 包，手动编译安装（手动编译安装指南）。 如果是双显卡，可以从这里选择一个方案来切换显卡：NVIDIA Optimus 使用 glxinfo 程序. 这个程序是在 mesa-utils 软件包中，如果 glxinfo | grep rendering 返回值为 direct rendering: Yes 表示已成功安装。 Intel显卡 官方方案 如果显卡是2007年及以后生产的，请尝试卸载xserver-xorg-video-intel 软件包，并使用内置的模式设置驱动程序（xserver-xorg-core）。 对于较旧的设备：xserver-xorg-video-intel 如果已安装驱动程序，但Debian/Ubuntu找不到，请尝试通过运行安装 mesa-utils。 切换显卡 Prime方案 首先安装 nvidia-prime ，源中是找不到它的，需要手动下载安装，点此下载 选择Intel显卡： sudo prime-select intel 选择NVIDIA显卡： sudo prime-select nvidia 查看正在运行的显卡： prime-select query ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:3:2","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"可能遇到的问题 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"用户不在sudoers文件中 场景： sudo 失败，提示“用户不在sudoers文件中此事将被报告”。 解决方法 su root ，以root身份运行 vi /etc/sudoers，或者 nano /etc/sudoers，总之打开 sudoers 这个文件并编辑它。 在 # User privilege specification root ALL=(ALL:ALL) ALL 下添加一行 username ALL=(ALL:ALL) ALL 保存退出即可。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:1","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"无法调节音量 场景： 在有声音输出的前提下，无法调节音量。 解决方法 使用 alsamixer 命令直接调节。 安装Kmix音量调节器。 sudo apt-get install kdemultimedia kmix 额外参考 https://wiki.debian.org/Sound 检测音频设备命令 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:2","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"锁屏后黑屏 解决方法 安装 laptop-mode-tools ，参靠 这里 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:3","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"提示缺失firmware 场景1： Possible missing firmware /lib/firmware/rtl_nic/rtl8168e-2.fw for module r8169 解决方法： sudo apt-get install firmware-realtek 场景2： Possible missing firmware /lib/firmware/i915/glk_dmc_ver1_04.bin for module i915 解决方法 到 这里 找到缺失的固件，点击 plain 下载，把它们复制到 /lib/firmware/i915 下。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:4","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"配置环境变量 场景： dpkg: warning: 'ldconfig' not found in PATH or not executable. dpkg: warning: 'start-stop-daemon' not found in PATH or not executable. dpkg: error: 2 expected programs not found in PATH or not executable. Note: root's PATH should usually contain /usr/local/sbin, /usr/sbin and /sbin. 翻译成中文： dpkg：警告：在路径中找不到'ldconfig'或它不是可执行文件。 dpkg：警告：在PATH中找不到'start-stop-daemon'或它不是可执行文件。 dpkg：错误：在PATH中找不到2个预期程序或它们不可执行。 注意：root的PATH通常应该包含/usr/local/sbin, /usr/sbin and /sbin. 解决方法 参考 这里 以及 更多配置环境变量的方法 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:5","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"软件无法启动 场景：一般是root身份登录系统，打不开某些软件（google chrome），而普通用户可以打开；然而有时，某些软件普通用户也打不开（PicGo的AppImage）。以下解决方法适用于上述两种情况 解决方法 以google chrome为例： 找到usr/share/applications中的google chrome启动文件或图标，右击用文本编辑器打开 在Exec=typora %U后面添加 --no-sandbox（注意--的前面有个空格） ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:6","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"双系统时间不一致 解决方法 参考 这里 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:7","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"双系统磁盘读写问题 Windows磁盘挂载到Linux 原因 挂载后，有时处于只读状态，这是由于Windows的“快速启动”(Fast Startup)功能开启后，关闭计算机时，Windows将一部分RAM里的内容保存到磁盘，下次启动时，将该部分内容重新加载到内存中。 解决方法 从grub界面选择Windows启动，然后重启而不是关机。 虽然不方便，但这也是解决问题的最快方法，不需要像其他解决方法那样长期更改任何内容。Windows重启时，不会在下次启动时使用“快速启动”功能。这意味着它不会进入休眠状态、获取系统运行状态的快照或将任何内存数据保存到磁盘。分区上没有休眠数据，这意味着可以安全地写入到分区上，Linux会识别出这一点。 禁用快速启动。 如果常常需要从Linux写入到Windows分区上，可以选择这个方法。 缺点是Windows需要更长的开机引导时间。 要禁用快速启动，可以在设置或者控制面板里面找“电源选项”。 以上两种方法是安全的做法，当然也可以在网上搜索使用linux命令的方法来解决问题。 Linux磁盘挂载到Windows 解决方法 在Windows上使用 Paragon ExtFS for Windows 这个软件。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:8","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"ROOT身份运行应用 解决方法 使用 pkexec 命令 如以ROOT身份运行应用Dlophin： sudo pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY dolphin ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:4:9","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"常用软件安装参考 Chrome Qv2ray Telegram Teamviewer Typora 下载技巧 不建议官网中添加第三方源的方式安装，那种方式慢的不可思议。而是参考 issues 2625 ，在 Packages 中找到要下载的版本文件名，然后手动将主页+文件名组合成下载链接，比如：http://typora.io/linux/typora_0.9.89_amd64.deb VS Code WPS for Linux OBS Studio 命令行下载软件 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:5:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"优化与美化 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:0","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"fcitx 输入法 注意 以下方案用的输入法是 fcitx-pinyin ，而不是 fcitx-googlepinyin 或者其他输入法。 搜狗词库转换 参考 搜狗细胞词库转换 安装 fcitx-tools 下载 createPYMB 、gbkpy.org 、pyPhrase.org 、搜狗scel词库 ，假设都保存在 /home/username/下载/ #新建一个文件夹，即/home/username/下载/orgfile mkdir -p orgfile #将scel转换为org for dict in *.scel; do scel2org $dict -o orgfile/$dict.org ; done #复制pyPhrase.org到orgfile中 cp pyPhrase.org orgfile #去重、排序、汇总 cat orgfile/* | sort | uniq \u003e dicts.org #将org转换为mb createPYMB gbkpy.org dicts.org 正常应生成 dicts.org 、pybase.mb 、pyERROR 、pyphrase.mb 、pyPhrase.ok 其中 pybase.mb 为拼音单字库，pyphrase.mb 为拼音词库 将 dicts.org 、pybase.mb 、pyphrase.mb 移动到全局配置拼音词库 /usr/share/fcitx/pinyin/ 中（用户各自的配置拼音词库在 /home/username/.config/fcitx/pinyin/ ），如果这文件夹不存在，手动新建即可，放好词库后，重启 Fcitx 其他工具 也有人用 深蓝词库转换 进行词库转换的，虽然它支持的词库类型更多，但是使用深蓝词库转换，还得配置 dotnet 搜狗皮肤转换 网上都推荐用这个工具：ssf2fcitx ，然而我总是被提示缺失几个头文件，总也配置不好，干脆就换成 ssfconv ，这个工具比较新，而且对于ssf2fcitx还有改进。 下载搜狗皮肤，转换好皮肤后，将皮肤文件夹放到全局设置 /usr/share/fcitx/skin/ ，或者用户设置 /home/username/.config/fcitx/skin/ ，如果这两个文件夹不存在，手动新建即可 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:1","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"Grub 注意 用PS编辑过的图片可能嵌入了grub不支持的一些数据，具体是什么也没排查出来，如果强行应用就会得到grub的报错。 grub主题配置 、grub参数介绍 选择系统后，加载linux内存盘时，屏幕中央会有一个一闪而过的图片，它位于 /etc/alternatives/desktop-theme/grub/ 登录界面的背景图位于 /etc/alternatives/desktop-theme/login/ 系统有一些主题位于 /usr/share/desktop-base/ ，这里面的其他主题怎么启用我不知道。另外可以看到 /usr/share/desktop-base/active-theme/ 其实默认是指向 /etc/alternatives/desktop-theme 的 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:2","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"添加软件到系统应用列表 场景： 比如下载了一个PicGo的AppImage，但在应用程序面板的应用列表（相当于Windows开始菜单里的应用列表）中找不到。 解决方法 在任意位置右键新建一个 链接到应用程序 ，然后在 应用程序 标签下的 命令 里填入软件所在路径（如果配置好后因为权限问题打不开软件，可在路径后加上 --no-sandbox ），当然也可以直接浏览，然后确定。之后将这个配置好的 .desktop 文件（相当于Windows中的快捷方式）移动到 /usr/share/applications/ 即可。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:3","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"为软件更改图标 解决方法 在 /usr/share/applications/ 中，编辑要更改的软件的 .desktop 文件，在 Icon= 后填入自定义的软件图标路径即可。 为防止以后误删该图标，也可将图标放入 /usr/share/pixmaps/ 文件夹下（第三方图标都默认存放在这里），然后在 Icon= 后接图片名称即可，不用加文件后缀，比如现在有文件 /usr/share/pixmaps/PicGo.png ，写 Icon=PicGo 即可生效。 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:4","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["系统"],"content":"字体 参考 如何在linux系统上安装字体 ","date":"2020-07-23","objectID":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/:6:5","tags":["linux"],"title":"Debian小指南","uri":"/debian%E5%B0%8F%E6%8C%87%E5%8D%97/"},{"categories":["软件"],"content":"Adobe CC 2018~2019系列下载直链","date":"2020-05-23","objectID":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/","tags":["多媒体"],"title":"Adobe系列下载直链","uri":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/"},{"categories":["软件"],"content":"Adobe软件官方直接下载地址 虽说下载的都是独立的软件安装包，但还是会安装Adobe Creative Cloud。如果电脑上已经存在新版的Adobe Creative Cloud，这个旧版本的Adobe Creative Cloud可能还会与之冲突。 推荐 推荐使用 vposy 处理过的Adobe系列软件，可以下载独立版，还没有恼人的Adobe Creative Cloud。 要注意的是他新浪微博的个人置顶帖仅粉丝可见。 注意 以下个别地址不挂代理速度会很慢，个别地址就算挂上代理速度仍然会很慢🙃 ","date":"2020-05-23","objectID":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/:1:0","tags":["多媒体"],"title":"Adobe系列下载直链","uri":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/"},{"categories":["软件"],"content":"Adobe CC 2018 Adobe CC 2018 Direct Download Windows Windows MacOS MacOS Size Installer Size Installer Photoshop CC 2018 (32-bit) 1.3 GB Download Photoshop CC 2018 (64-bit) 1.6 GB Download 1.5 GB Download Lightroom CC 2018 809 MB Download 876 MB Download Lightroom Classic CC 2018 1.2 GB Download 1.2 GB Download Illustrator CC 2018 (32-bit) 1.9 GB Download Illustrator CC 2018 (64-bit) 2.0 GB Download 2.0 GB Download InDesign CC 2018 (32-bit) 877 MB Download InDesign CC 2018 (64-bit) 929 MB Download 883 MB Download InCopy CC 2018 (32-bit) 864 MB Download InCopy CC 2018 (64-bit) 914 MB Download 869 MB Download Dreamweaver CC 2018 (32bit) 936 MB Download Dreamweaver CC 2018 (64bit) 982 MB Download 769 MB Download Adobe Muse CC 2018 771 MB Download 707 MB Download Animate CC 2018 (Flash Pro) 1.5 GB Download 1.7 GB Download Dimension CC 2018 1.4 GB Download 1.3 GB Download Adobe XD CC 2018 Character Animator CC 2018 720 MB Download 794 MB Download Premiere Pro CC 2018 1.4 GB Download 1.5 GB Download After Effects CC 2018 1.7 GB Download 1.7 GB Download Audition CC 2018 572 MB Download 672 MB Download Prelude CC 2018 731 MB Download 800 MB Download Media Encoder CC 2018 1.3 GB Download 1.3 GB Download Bridge CC 2018 (32-bit) 822 MB Download Bridge CC 2018 (64-bit) 954 MB Download 868 MB Download SpeedGrade CC 2015 339 MB Download 360 MB Download Edge Animate CC 2015 149 MB Download 137 MB Download Fuse CC (Beta) 3.8 GB Download 3.8 GB Download Adobe Scout CC 18 MB Download 13 MB Download CC Desktop App (v. 5.1.0.407) 233 MB Download 173 MB Download CC Desktop App (v. 4.9.0.504) 326 MB Download 263 MB Download Other Tools Included in Creative Cloud 2018 Acrobat Pro DC 2018 (32bit) 785 MB Download 692 MB Download Adobe Camera Raw 12.2.1 460 MB Download 465 MB Download Flash Builder 4.7 Prem. (32bit) 1.0 GB Download Flash Builder 4.7 Prem. (64bit) 1.0 GB Download 1.1 GB Download Fireworks CS6 438 MB Download 627 MB Download Encore CS6 (readme) 1.1 GB Download 1.6 GB Download ExtendScript Toolkit CC 94 MB Download 96 MB Download Adobe Gaming SDK 1.4 296 MB Download 315 MB Download Touch App Plugins 4 MB Download 8 MB Download Creative Cloud Packager 356 MB Download 162 MB Download ","date":"2020-05-23","objectID":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/:1:1","tags":["多媒体"],"title":"Adobe系列下载直链","uri":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/"},{"categories":["软件"],"content":"Adobe CC 2019 Adobe CC 2019 Direct Download Windows Windows MacOS MacOS Size Installer Size Installer Photoshop CC 2019 (64-bit) 1.7 GB Download 1.6 GB Download Lightroom CC 2019 909 MB Download 885 MB Download Lightroom Classic CC 2019 1.3 GB Download 1.3 GB Download Illustrator CC 2019 (32-bit) 1.9 GB Download Illustrator CC 2019 (64-bit) 1.9 GB Download 2.0 GB Download InDesign CC 2019 (32-bit) 931 MB Download InDesign CC 2019 (64-bit) 987 MB Download 916 MB Download InCopy CC 2019 (32-bit) 916 MB Download InCopy CC 2019 (64-bit) 970 MB Download 903 MB Download Dreamweaver CC 2019 (32bit) 983 MB Download Dreamweaver CC 2019 (64bit) 1.0 GB Download 776 MB Download Adobe Muse CC 2018 771 MB Download 707 MB Download Animate CC 2019 (Flash Pro) 1.5 GB Download 1.7 GB Download Dimension CC 2019 1.4 GB Download 1.4 GB Download Adobe XD CC 2019 Character Animator CC 2019 1.1 GB Download 1.2 GB Download Premiere Rush CC 2019 1.7 GB Download 1.7 GB Download Premiere Pro CC 2019 1.7 GB Download 1.8 GB Download After Effects CC 2019 2.0 GB Download 2.0 GB Download Audition CC 2019 624 MB Download 635 MB Download Prelude CC 2019 751 MB Download 799 MB Download Media Encoder CC 2019 1.3 GB Download 1.4 GB Download Bridge CC 2019 (32-bit) 921 MB Download Bridge CC 2019 (64-bit) 1.0 GB Download 925 MB Download SpeedGrade CC 2015 339 MB Download 360 MB Download Fuse CC (2017 Beta) 3.7 GB Download 3.7 GB Download Edge Animate CC 2015 149 MB Download 137 MB Download CC Desktop App (v. 5.1.0.407) 233 MB Download 173 MB Download CC Desktop App (v. 4.9.0.504) 326 MB Download 263 MB Download Other Tools Included in Creative Cloud 2019 Acrobat Pro DC 2019 (32bit) 883 MB Download 743 MB Download Adobe Camera Raw 12.2.1 460 MB Download 465 MB Download Flash Builder 4.7 Prem. (32bit) 1.0 GB Download Flash Builder 4.7 Prem. (64bit) 1.0 GB Download 1.1 GB Download Fireworks CS6 438 MB Download 627 MB Download Encore CS6 (readme) 1.1 GB Download 1.6 GB Download ExtendScript Toolkit CC 94 MB Download 96 MB Download Adobe Gaming SDK 1.4 296 MB Download 315 MB Download Touch App Plugins 4 MB Download 8 MB Download Creative Cloud Packager 356 MB Download 162 MB Download ","date":"2020-05-23","objectID":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/:1:2","tags":["多媒体"],"title":"Adobe系列下载直链","uri":"/adobe%E7%B3%BB%E5%88%97%E4%B8%8B%E8%BD%BD%E7%9B%B4%E9%93%BE/"},{"categories":["博客"],"content":"使用Github Pages和Hexo搭建个人博客","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"前言 操作环境为Windows 10。 本文只是进行了一些基础配置，一些我没用上的功能就没有写。 主要作为自己搭建Hexo博客入门时的总结。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"配置环境 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"安装Node.js Node.js 安装完成后，打开cmd，输入node -v和npm -v，若出现版本号，即安装成功。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"安装Git Git 安装路径可以更改，其他安装选项一路Next即可。 进行到第2步的时候，确保选中Git Bash here（默认选中），这样就可以在资源管理器的右键菜单中随时使用Git Bash here打开Git Bash。 进行到第6步的时候，确保选中第二项（默认选中），这样就可以在Git Bash、cmd、Power Shell和其他第三方软件中（比如VS Code中的Terminal里）使用Git。 安装完成后在cmd中输入git --version，若出现版本号，即安装成功。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"更改npm仓库地址（建议） 在Git Bash中进行以下操作，以后大部分的操作都在Git Bash内进行，而不用cmd了（当然也可以用，上图不是选中了Git from the command line and also from 3rd-party software嘛） 随便什么地方空白处右键点击Git Bash Here即打开Git Bash。 或者直接找到Git Bash.exe打开。 法一：改变默认地址 输入以下命令查看当前npm的仓库地址： npm config get registry 控制台会显示npm的默认仓库地址： https://registry.npmjs.org/ 使用以下命令来改变默认仓库地址为淘宝镜像地址： npm config set registry https://registry.npm.taobao.org 然后使用命令查看当前npm的仓库地址验证是否成功更改。 使用这种方法，以后使用npm命令时，仍然输入npm。 法二：安装cnpm 使用以下命令安装cnpm： npm install -g cnpm --registry=https://registry.npm.taobao.org 安装完成后输入以下命令，若出现版本号，即安装成功。 cnpm -v 使用这种方法，以后要输入cnpm代替npm来执行命令。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:3","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"安装Hexo 在合适的地方新建一个文件夹，名称任意。我的这个文件夹是E:/Blog，对于这个文件夹， 我的理解 它其实就是常提到的所谓“Hexo目录”，Hexo就安装在这里，博客的所有数据都存在这里。 GitHub仓库里的博客文件其实是Hexo目录下的public文件夹里的内容： 每次用Git Bash输入hexo g命令时，静态博客都会被生成到E:/Blog/public中，输入hexo d命令后，再被推送到仓库的master分支（默认为master） 注意 不要在安装Hexo之前，先行把创建的仓库克隆到本地，然后又在该仓库文件夹下安装Hexo，这是行不通的，Hexo只能在空文件夹下安装并初始化（初始化其实就是把Hexo的项目仓库克隆到本地）。 在Hexo目录下空白处右键点击Git Bash Here打开Git Bash。 或者打开Git Bash.exe，在Git Bash输入cd命令定位到Hexo目录下（大小写无所谓），比如： cd e:/blog 输入以下命令安装Hexo。会有几个报错，无视就行。 npm install hexo-cli -g 安装完后输入hexo -v，若出现版本号，即安装成功。 输入hexo init初始化文件夹（其实就是克隆Hexo的GitHub项目仓库到此文件夹），所以速度有点慢。 输入npm install安装必备的组件。 输入 npm i hexo-deployer-git 安装推送博客到仓库要用到插件（不安装它就不能使用hexo d命令） 输入hexo g生成静态网页，然后输入hexo s打开本地服务器，用浏览器打开http://localhost:4000/ ，可以看到Hexo默认的博客网页： 按ctrl+c关闭本地服务器。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"连接Git与本地 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"全局设置Git用户名和邮箱 在Git Bash中输入以下命令（把your_name改为自己的GitHub用户名）： git config --global user.name \"your_name\" 输入以下命令（把your_email@example.com改为自己的GitHub的注册邮箱） git config --global user.email \"your_email@example.com\" 输入以下命令看是否显示自己的用户名和邮箱： git config --global --list ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"使用SSH连接到GitHub 输入以下命令（把your_email@example.com改为自己的GitHub的注册邮箱） ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 按照提示完成三次回车（使用默认设置），即可生成 ssh key。 在Github个人设置中点击SSH and GPG keys，点击New SSH Key新建SSH密钥： 在Git Bash输入cat ~/.ssh/id_rsa.pub 查看刚刚生成的个人公钥。复制输出的内容，粘贴到上图key框中,Title任意。 或者用记事本打开C:/Users/用户名/.ssh中的id_rsa.pub文件。复制全部内容，粘贴到上图key框中,Title任意。 点击Add SSH Key。 在Git Bash中输入以下命令， ssh -T git@github.com 首次使用需要确认并添加主机到本机SSH可信列表——当出现下面这句提示时，输入yes回车即可： Are you sure you want to continue connecting (yes/no)? 若出现带有自己用户名的语句即为连接成功： Hi your_name! You've successfully authenticated, but GitHub does not provide shell access. ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"使用SSH连接到Coding 注意 如果和我一样，GitHub和Coding的注册邮箱 相同 的话，这一步继续按照这篇文章来操作。 如果GitHub和Coding的注册邮箱 不同 ， 这一步请参考👉 ssh-key git多账户配置 Git配置多个SSH-Key Coding新增SSH的步骤和GitHub差不多 因为我的GitHub和Coding的注册邮箱相同，所以上面生成的那个SSH也可以用于Coding。 在Git Bash输入cat ~/.ssh/id_rsa.pub 查看个人公钥。复制输出的内容，粘贴到上图公钥内容框中。 或者用记事本打开C:/Users/用户名/.ssh中的id_rsa.pub文件。复制全部内容，粘贴到上图公钥内容框中。 点击添加。 在Git Bash中输入以下命令， ssh -T git@e.coding.net 首次使用需要确认并添加主机到本机SSH可信列表——当出现下面这句提示时，输入yes回车即可： Are you sure you want to continue connecting (yes/no)? 若出现带有自己用户名的语句即为成功： Coding 提示: Hello your_name, You've connected to Coding.net via SSH. This is a personal key. your_name，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥. 公钥指纹：************************ ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:3","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"创建GitHub Pages 新建一个仓库，仓库名称任意。 注意 GitHub上任意公开仓库都可使用GitHub Pages，只是URL有区别。 仓库名称若是 username.github.io ，URL就是 http://username.github.io ; 仓库名称若是其他，比如 blog ，URL就是 http://username.github.io/blog 选择“通过README文件初始化仓库”，GitHub会为此仓库开启GitHub Pages，如下图所示，提示用户“你的站点已经发布”，点进去会显示一个网页，就是刚才的README文件。 或者手动开启GitHub Pages，如下图，需要选择 source ，比如选择 master 然后点击 save 创建Github仓库时，如果不手动设置分支，博客会默认推送到master或main分支。 注意 当然可以建立几个分支，一个用来发布博客（就是E:/Blog/public中的内容），一个用来存储整个博客基础数据（即整个Hexo目录），这样可以多设备同步写博客，只是自己的一些appid就会暴露在源码中了。 使用多分支的话，要记得在Hexo目录下的_config.yml文件中改变发布仓库的分支。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"创建Coding Pages 啰嗦几句 Coding的静态网站服务偶尔会出现问题，所以看自己需要，没必要非得同时部署博客到GitHub和Coding。 其实开启了jsDelivr加速的GitHub Pages足够支撑大部分地区的浏览，要追求更快的速度，用Gitee Pages也行，它在三者之间速度最快，只是免费版本的不能自定义域名罢了。 Coding工作台界面更新频繁，所以文章有些地方可能对不上实际情况。 首先在Coding工作台新建一个项目 注意 因为Coding工作台的更新，模板会变动，而且不同模板的功能和设置都不同，不过影响不大，功能和设置后续可以自己在项目设置里更改。 新建的项目地址名称也是随便填。 选中启用 README.md 文件初始化项目，如果不，等会儿发布静态网站时还得手动在代码仓库功能中选择快速初始化仓库。 建好项目后，确保项目有持续集成和持续部署这两个功能，如果没有，就在左下角的项目设置里，打开这两个功能的开关（所以新建项目时，选择哪个模板不重要）： 然后回到项目控制台，选择持续部署里的静态网站，点击立即发布静态网站，前提是已经实名认证过账号： Coding会生成一个随机的网址作为此静态网站的地址。当然现在什么内容也没有，需要后续部署。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"下载matery主题 下载主题源码，解压缩后，将hexo-theme-matery文件夹放到Hexo目录下的themes文件夹中即可。 也可以在Hexo目录下的themes文件夹中通过Git Bash输入以下命令克隆主题仓库： git clone https://github.com/blinkfox/hexo-theme-matery.git ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:7:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"配置主题 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:8:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"配置Hexo的_config.yml文件 切换主题 在Hexo目录下的_config.yml文件中，修改theme的值（此值即为主题文件夹的名字）： theme:hexo-theme-matery 基础设置 在Hexo目录下的_config.yml文件中，根据自身情况修改。 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述，主要用于SEO keywords 网站的关键词。使用半角逗号,分隔多个关键词 author 作者名字 language 网站使用的语言。简体中文用户设为zh-CN timezone 网站时区。Hexo 默认使用电脑的时区 修改URL 在Hexo目录下的_config.yml文件中，将url: http://yoursite.com 改为自己的GitHub Pages链接。 屏幕适配优化（建议） 在Hexo目录下的_config.yml文件中，修改两个per_page的分页条数值为6的倍数，如：12、18等，这样文章列表在各个屏幕下都能较好的显示。 index_generator:path:''per_page:12order_by:-date per_page:12pagination_dir:page 修改deploy地址 在Hexo目录下的_config.yml文件中： deploy:type:gitrepository:github:git@github.com:your_name/your_project_name.gitcoding:git@e.coding.net:your_name/your_project_name.gitbranch:master 将repository修改为自己的GitHub仓库和Coding仓库的SSH地址： 这样部署博客时就会同时部署到这两个仓库。 修改代码高亮 默认的Hexo代码高亮不好分辨，十分影响阅读，matery主题中使用 hexo-prism-plugin 的Hexo插件处理代码高亮，在Git Bash中输入以下命令安装： npm i -S hexo-prism-plugin --save 在Hexo目录下的_config.yml文件中，修改highlight的值为false，然后新增prism插件相关的配置： prism_plugin:mode:'preprocess'theme:'tomorrow'line_number:truecustom_css: 增加搜索模块（可选） matery主题中使用 hexo-generator-search 的Hexo插件来做内容搜索，在Git Bash中输入以下命令安装： npm install hexo-generator-search --save 在Hexo目录下的_config.yml文件中，新增以下的配置项： search:path:search.xmlfield:post 添加RSS订阅支持模块（可选） matery主题中使用 hexo-generator-feed 的Hexo插件来支持RSS，在Git Bash中输入以下命令安装： npm install hexo-generator-feed --save 在Hexo目录下的_config.yml文件中，新增以下的配置项： feed:type:atompath:atom.xmllimit:20hub:content:content_limit:140content_limit_delim:' 'order_by:-date 执行 hexo clean \u0026\u0026 hexo g 重新生成博客文件，在Hexo目录下的 public 文件夹中看到 atom.xml 文件，说明安装成功。 增加中文链接转拼音模块（可选） 如果文章名称是中文的，那么Hexo默认生成的永久链接也会有中文，这样不利于SEO，而且gitment评论对中文链接也不支持。可以用 hexo-permalink-pinyin 的Hexo插件使生成文章时自动生成中文拼音的永久链接。 在Git Bash中输入以下命令安装： npm i hexo-permalink-pinyin --save 在Hexo目录下的_config.yml文件中，新增以下的配置项： permalink_pinyin:enable:trueseparator:'-'# 默认分隔符为 '-'，按需要自定义 效果就是： https://duduibahuang.github.io/2020/05/13/搭建博客 变成： https://duduibahuang.github.io/2020/05/13/da-jian-bo-ke 增加Emoji表情支持（可选） matery主题中使用 hexo-filter-github-emojis 的 Hexo 插件来支持emoji表情的生成，把对应的markdown emoji语法（::,例如：😄）转变成emoji表情，在Git Bash中输入以下命令安装： npm install hexo-filter-github-emojis --save 在 Hexo 目录下的_config.yml文件中，新增以下的配置项： githubEmojis:enable:trueclassName:github-emojiinject:truestyles:customEmojis: ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:8:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"配置matery主题的_config.yml文件 更改图片 相关图片（比如赞赏码、文章特色图、logo等），在文件夹中替换为自己的即可，注意名称、路径、大小和分辨率。 修改社交链接 在matery主题的_config.yml文件中，将社交连接改为自己的。 另外，可以在matery主题的/layout/_partial/social-link.ejs文件中，新增、修改自己需要的社交链接地址，增加链接可参考如下代码： \u003c% if (theme.socialLink.github) { %\u003e \u003ca href=\"\u003c%= theme.socialLink.github %\u003e\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\"\u003e \u003ci class=\"fab fa-github\"\u003e\u003c/i\u003e \u003c/a\u003e \u003c% } %\u003e 社交图标（如：fa-github）可以在 Font Awesome 中找到，复制图标名称在这里替换即可。 注意 不过要注意Font Awesome的版本和主题使用的是否一致，新版本中新增的图标在旧版本中是无法显示的。 jsDelivr的CDN加速服务（建议） 注意 第一次使用此功能，要先配置url，再hexo clean \u0026\u0026 hexo g \u0026\u0026 hexo d部署到GitHub的仓库（必须是GitHub的仓库）。 URL配置规则：https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名，在matery主题的_config.yml文件中最后两行，更改为自己的链接： jsDelivr:url:https://cdn.jsdelivr.net/gh/duduibahuang/duduibahuang.github.io 解释 这样配置后生成的博客推送到GitHub的仓库中，然后jsDelivr访问该仓库，为这些文件提供CDN服务（具体可以到 jsDelivr官网 查看详细规则）。 只要将上面的URL配置好就算开启了jsDelivr加速服务，别的文件引用链接不用改为jsDelivr要求的格式，会自动更改的。 虽然理论上jsDelivr会引用最新版本的文件，但是更新时间有点长，可能会导致网页显示上一版本的内容。 配置了此项，就代表着本地调试的时候，网站依然会去GitHub请求资源（原来的资源），本地调试的时候记得将此项配置注释或者删除掉。 不启用加速 这时，博客网站会从GitHub的服务器中加载需要的资源，因为GitHub的服务器在国外，所以网站加载速度慢。 不启用加速时，查看网站源码，文件的引用是这样的： 启用加速 这时，博客网站会从jsDelivr的服务器中加载需要的资源，因为jsDelivr在中国有服务器，所以网站加载速度会略有提升。 启用加速时，查看网站源码，文件的引用是这样的： 百度统计（可选） 在matery主题的_config.yml文件中，找到百度统计模块，填写自己的ID： baiduAnalytics:enable:trueid: 在 百度统计 中新建网站，完成后会让你复制代码粘贴到自己的文件中，在hm.src = \"https://hm.baidu.com/hm.js?之后的字符串就是你的ID： 其实打开matery/layout/_partial/baidu-analytics.ejs就会发现，百度统计让你复制的代码已经在这里了，只是没有ID，意思就是matery主题的作者已经把这个功能集成了。 谷歌统计（可选） 在matery主题的_config.yml文件中，找到谷歌统计模块，填写自己的ID： googleAnalytics:enable:trueid: 在 谷歌统计 中添加自己的网站，找到自己的跟踪ID： ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:8:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"新增博客功能页面（可选） 新建分类 categories 页 categories页是用来展示所有分类的页面，如果hexo目录下的source目录中还没有/categories/index.md文件，使用Git Bash运行以下命令新建： hexo new page \"categories\" 编辑刚刚新建的页面文件/source/categories/index.md，至少需要以下内容： ---title:categoriesdate:2020-05-13 22:06:28type:\"categories\"layout:\"categories\"--- 新建标签 tags 页 tags页是用来展示所有标签的页面，如果hexo目录下的source目录中还没有/tags/index.md文件，使用Git Bash运行以下命令新建： hexo new page \"tags\" 编辑刚刚新建的页面文件/source/tags/index.md，至少需要以下内容： ---title:tagsdate:2020-05-13 22:06:28type:\"tags\"layout:\"tags\"--- 新建留言板 contact 页 contact页是用来展示留言板信息的页面，如果hexo目录下的source目录中还没有/contact/index.md文件，使用Git Bash运行以下命令新建： hexo new page \"contact\" 编辑刚刚新建的页面文件/source/contact/index.md，至少需要以下内容： ---title:contactdate:2020-05-14 10:40:01type:\"contact\"layout:\"contact\"--- 注意 本留言板功能依赖于第三方评论插件，需要启用自己的的评论系统才有效果。评论模块设置在matery目录下的_config.yml文件中。 新增评论插件 评论插件的选择可以看云游君的这篇 第三方评论系统之我见 。 首先来到 Valine官网，创建新应用，之后在应用的设置里复制 AppId 和 AppKey 。 在matery目录下的 _config.yml 文件中，填写刚刚复制的AppId 和 AppKey。 # Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:enable:trueappId:appKey:notify:trueverify:truevisitor:trueavatar: 'mm' # Gravatar style :mm/identicon/monsterid/wavatar/retro/hidepageSize:10placeholder:'说点什么'# Comment Box placeholderbackground:#放上图片的地址 在该文件的400行左右，可以按需要更改引用Valine插件的地址： valine:/libs/valine/Valine.min.js#若想保持最新版，请替换为https://unpkg.com/valine/dist/Valine.min.js，默认为/libs/valine/Valine.min.js 然而 然而如果使用 https://unpkg.com/valine/dist/Valine.min.js 这个链接，同时jsDelivr的CDN加速服务处于启用状态，就会导致Valine加载失败（具体可以看加载失败的网页源代码，会发现引用Valine插件的地址被jsDelivr变成了错误的地址）。 解决方案 可以手动下载最新版Valine.min.js覆盖的本地/themes/matery/source/libs/valine/Valine.min.js，然后调用本地链接。 Valine的留言管理是通过操作数据库完成的： Valine目前使用的是 Gravatar 作为评论列表头像。请自行登录或注册 Gravatar，然后修改自己的头像。 评论的时候，留下在 Gravatar 注册时所使用的邮箱即可。 修改matery目录下_config.yml文件中的Valine模块即可更改默认非自定义头像： Valine...avatar: 'mp' # Gravatar style :''/mp/identicon/monsterid/wavatar/retro/robohash/hide avatar可选值 目前Gravatar的非自定义头像有以下8种默认值可选: 参数值 表现形式 备注 空字符串'' Gravatar官方图形 mp 神秘人(一个灰白头像) identicon 抽象几何图形 monsterid 小怪物 wavatar 用不同面孔和背景组合生成的头像 retro 八位像素复古头像 robohash 一种具有不同颜色、面部等的机器人 hide 不显示头像 新建友情链接 friends 页 friends页是用来展示友情链接信息的页面，如果hexo目录下的source目录中还没有/friends/index.md文件，使用Git Bash运行以下命令新建： hexo new page \"friends\" 编辑刚刚新建的页面文件/source/friends/index.md，至少需要以下内容： ---title:friendsdate:2020-05-14 10:45:11type:\"friends\"layout:\"friends\"--- 在hexo目录下的source目录中新建_data目录，在_data目录中新建friends.json文件，文件内容示例如下所示： [{\"avatar\": \"https://cdn.jsdelivr.net/gh/duduibahuang/photo/avatar.jpg\",\"name\": \"闪烁之狐\",\"introduction\": \"Matery主题作者\",\"url\": \"https://blinkfox.github.io/\",\"title\": \"前去学习\"}] 新建404页 matery主题没有404页面，在hexo目录下的source目录中新建一个404.md，内容如下： ---title:404date:2020-05-14 10:45:11type:\"404\"layout:\"404\"description:\"你来到了没有知识的荒原 \"--- 然后在matery主题文件夹的layout目录下新建一个404.ejs文件，内容如下： \u003cstyle type=\"text/css\"\u003e /* don't remove. */ .about-cover { height: 75vh; } \u003c/style\u003e \u003cdiv class=\"bg-cover pd-header about-cover\"\u003e \u003cdiv class=\"container\"\u003e \u003cdiv class=\"row\"\u003e \u003cdiv class=\"col s10 offset-s1 m8 offset-m2 l8 offset-l2\"\u003e \u003cdiv class=\"brand\"\u003e \u003cdiv class=\"title center-align\"\u003e 404 \u003c/div\u003e \u003cdiv class=\"description center-align\"\u003e \u003c%= page.description %\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript\u003e // 每天切换 banner 图. Switch banner image every day. $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)'); \u003c/script\u003e 新增分享插件 在matery目录下的_config.yml文件中，默认有两种选择，sharejs和addthis： sharejs # 支持顺序，可选项目为twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin.sharejs:enable:falsesites:twitter,facebook,google,qq,qzone,wechat,weibo,douban,linkedin matery的sharejs文件在matery目录下的source/libs/share/js中，不过是压缩后的min.js文件。 AddThis 首先到官网创建新应用，之后复制应用的pubid： addthis:enable:falsepubid:#输入应用的pubid ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:8:3","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"文章设置 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:9:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"Front-matter设置（建议） 为了新建文章方便，将Hexo目录下/scaffolds/post.md、/scaffolds/page.md、/scaffolds/draft.md都修改为： ---title:{{title }}date:{{date }}img:top:truecover:truecoverImg:toc:truemathjax:falsesummary:categories:tags:keywords:--- 这样以后新建文章后不用自己补充了，修改信息即可，每篇文章的这些属性可以单独设置。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:9:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"Front-matter选项解释 这些内容均为非必填的。但至少填写title和date的值。 解释 配置选项 默认值 描述 title Markdown的文件标题 文章标题 date 文件创建时的日期时间 发布时间。尽量保证每篇文章的该值是唯一的，因为本主题中Gitalk和Gitment识别id是通过date的值来作为唯一标识的 author Hexo目录下_config.yml中的author 文章作者 img featureImages中的某个值 文章特征图，推荐使用图床 top true 是否作为首页推荐文章 cover false 是否将文章加入到首页轮播封面中 coverImg 无 该文章在首页轮播封面需要显示的图片，如果没有，则默认使用文章的特色图片 password 无 是否设置本文章的阅读验证密码。该值必须是用SHA256加密后的密码，若启用，前提是在主题的config.yml中激活了verifyPassword选项 toc true 本文章是否开启是否开启TOC。若启用，前提是在主题的config.yml中激活了toc选项 mathjax false 本文章是否开启数学公式支持。若启用，前提是在主题的config.yml中激活了mathjax选项 summary 无 如果这个属性有值，文章摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 多个tags写法👇 tags:- Typora- Markdown ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:9:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"新建文章、PicGo配置图床与发布 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:10:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"新建文章 在Hexo目录下，Git Bash Here，输入hexo new post \"文章名称\"，新建一篇文章。 然后打开Hexo目录下source/_posts，发现多了一个markdown文件，这就是刚刚新建的文章。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:10:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"配置图床（建议） 众所周知，Markdown文件是不能像Word那样把图片嵌入文件里的，即图片不是跟着文件走的。如果插入的是本地图片，发布了博客之后，就会发现文章里没有图片。所以一般选择插入网络图片的形式。 这时要有一个方便又快速的上传工具，会加快写作的效率。 注意 不要把隐私图片上传到图床中。 以下方法基于 PicGo2.3.0-beta.0 和 Typora0.9.86(beta) PicGo默认支持SM.MS图床、腾讯云COS、Github图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，更多支持可以根据 PicGo插件 自行配置，下面我只列举了几个适合新手的。 Typora自动上传需要PicGo(app)保持在后台运行。 如果习惯用命令行的话，PicGo-Core 更舒适。 法一 PicGo+Gitee图床+Typora，稳定。 引用限制 Gitee中超过1MB的文件无法使用外链引用。 在Typora中引用Gitee的图片，格式是这样的（PicGo默认自动复制的也是这个格式）： https://gitee.com/用户名/仓库名/raw/master/图片名 而不是用直接在网页地址栏复制的链接： https://gitee.com/用户名/仓库名/blob/master/图片名 即仓库名与master之间的是raw而不是其他字符，不然图片显示不出来。这是两种不同的协议。 上传成功但显示失败 如果在Typora中插入中文名的图片上传到Gitee，虽然PicGo也能自动上传成功，但是在Typora中显示不出来。 解决办法 把Typora的偏好设置→图像→插入图片时自动转义图片URL功能打开。这样以后再插入中文名图片就一切正常了，不过在这之前插入的中文名图片还是不能显示，需要重新插入（自动转义、上传）。 法二 PicGo+SM.MS图床+Typora，稳定，普通用户免费空间有5GB，在PicGo里配置很简单，只要粘贴上自己的token即可。 法三 PicGo+GitHub图床+Typora，非常不稳定，经常上传失败。 上传失败的几个原因 Typora提示：{\"success\",false}，这是因为同一名称的图片重复上传。 Typora提示：Failed to fetch，网络原因（比如端口的问题），具体可以在PicGo的设置里打开日志，查看原因。 据说图片上传时间的间隔太短会受到Github服务器限制（不知真假）。 PicGo自身的bug。 Typora自身的bug。 其他原因 有人说图片名称里有 + ，也会导致上传失败。我试验了一下这个版本，可以正常上传，他说的可能是过时版本的情况了。 法四 既然PicGo上传GitHub图床不稳定，干脆不用它了。直接在本地Git仓库文件夹里增删图片，然后通过GitHub Desktop或者Git等工具批量Pull、Push，用图片的时候在Markdown里粘贴图片链接即可： ![](https://cdn.jsdelivr.net/gh/用户名/仓库名/图片名) 缺点是图片名称容易搞混。 注意 注意：虽然理论上jsDelivr会引用最新版本的文件，但是更新时间有点长，可能会导致网页显示同名称的上一版本图片。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:10:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"发布文章 Hexo常用命令 hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。 该命令可以简写为hexo cl hexo generate 生成静态文件。 该命令可以简写为hexo g hexo server 启动服务器，开启本地预览，默认情况下，访问网址为：http://localhost:4000/ 该命令可以简写为hexo s hexo deploy 部署之前预先生成静态文件，然后部署。 该命令可以简写为hexo d 快速发布 编辑完文章后， 在Git Bash输入以下命令即可本地预览： hexo cl \u0026\u0026 hexo g \u0026\u0026 hexo s 在Git Bash输入以下命令即可部署博客到静态网站（即推送到相应仓库）： hexo cl \u0026\u0026 hexo d 部署成功还是失败？ 推送成功后，需要稍等几秒，网站才会应用刚刚部署的相关博客或设置。 如果多次刷新、清理缓存都未达到效果，就要检查自己的各方面配置了。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:10:3","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"自定义域名（可选） ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:11:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"域名解析 首先注册一个域名，很多人都推荐在国外的服务商注册，原因大概有： 可以不用实名认证 有大量便宜的域名注册商 不会像国内的一些服务商那样因为某些原因停止解析自己的域名 但是，“部分国外网站注册域名便宜”说的是域名价格平均比国内便宜，指的是平均情况。所以对于个别域名，还是要货比三家。我是在 阿里云 注册的域名，腾讯云 也不错。 注册之后解析域名，可以参考下图这样添加： 这样，阿里云的国外服务器为境外浏览者解析shan-ren.cn指向我的GitHub Pages，阿里云的国内服务器为国内浏览者解析shan-ren.cn指向我的Coding Pages，这就实现了分流。 智能分流不靠谱 有人说，这种情况可以两条记录都使用默认解析线路，阿里云会智能分流。我试了，不怎么稳定。 DNS分流解析效果图： DNS Check 我用的是国外 whatsmydns 查询的，用阿里云自己的DNS查询工具查不出来这种效果。 因为我还使用了jsDelivr的CDN加速服务，网站具体加载速度依赖jsDelivr的全球节点，不管是GitHub Pages还是Coding Pages，速度差别不大。 Gitee更快但是不怎么香 虽然Gitee Pages速度很快，但是Gitee Pages免费版本每次在本地部署后，还得在Gitee Pages页面手动更新，而且免费版本不能自定义域名，所以我就没用Gitee Pages。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:11:1","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"域名绑定 只是完成在域名服务商那里解析的步骤，还不能直接访问自己的域名转到相应的Github/Coding Pages，因为网站（Github/Coding Pages）上还需要有CNAME文件（如果域名解析类型是CNAME型）来对应。 法一 前提 前提是像我一样，把一个域名同时解析为两个域名（GitHub Pages和Coding Pages的域名）。 在本地Hexo目录下的source目录里新建名为CNAME的文件（没有后缀名），输入自己的解析的域名，比如我输入shan-ren.cn，这样hexo d之后，会把CNAME文件推送到我的GitHub和Coding的仓库，这样网站上就有CNAME文件来对应服务商的域名解析，输入shan-ren.cn就会跳转到相应的网站。 法二 前提 前提是解析了两个不同的域名分别指向GitHub Pages和Coding Pages。 这样就不能用法一了，因为一个CNAME文件放到两个网站上，两个网站都想对应解析成CNAME文件里的那个域名，这就产生了冲突导致解析失败。可以在每次hexo d部署之后，手动到网站上设置。 在GitHub Pages仓库的设置里参考下图设置： 在Coding Pages仓库的设置里参考下图设置： 要记得重新点击“立即部署”按钮： 这样就不冲突了。只是每次都得手动设置，可能还有更好的解决方案，但我用不上，就没去琢磨。 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:11:2","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["博客"],"content":"参考链接 Hexo文档 Matery文档 韦阳的博客 ","date":"2020-05-21","objectID":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:12:0","tags":["Hexo"],"title":"小白向Hexo博客搭建","uri":"/%E5%B0%8F%E7%99%BD%E5%90%91hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]